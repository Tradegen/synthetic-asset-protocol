// SPDX-License-Identifier: MIT

pragma solidity ^0.8.3;

// OpenZeppelin.
import "./openzeppelin-solidity/contracts/SafeMath.sol";

contract Treasury {
    using SafeMath for uint256;

    /* ========== CONSTANTS ========== */

    uint256 public constant GRACE_PERIOD = 14 days;
    uint256 public constant MINIMUM_DELAY = 2 days;
    uint256 public constant MAXIMUM_DELAY = 30 days;

    /* ========== STATE VARIABLES ========== */

    address public admin;
    address public pendingAdmin;
    uint256 public delay;

    mapping (bytes32 => bool) public queuedTransactions;

    /* ========== CONSTRUCTOR ========== */

    constructor(address _admin, uint256 _delay) {
        require(_delay >= MINIMUM_DELAY, "Treasury: Delay must exceed minimum delay.");
        require(_delay <= MAXIMUM_DELAY, "Treasury: Delay must not exceed maximum delay.");

        admin = _admin;
        delay = _delay;
    }

    /* ========== MUTATIVE FUNCTIONS ========== */

    receive() external payable { }

    /**
    * @notice Updates the contract's delay between transactions.
    * @dev Only this contract can call this function.
    * @param _delay The new delay.
    */
    function setDelay(uint256 _delay) public {
        require(msg.sender == address(this), "Treasury: Call must come from Treasury.");
        require(_delay >= MINIMUM_DELAY, "Treasury: Delay must exceed minimum delay.");
        require(_delay <= MAXIMUM_DELAY, "Treasury: Delay must not exceed maximum delay.");
        delay = _delay;

        emit NewDelay(_delay);
    }

    /**
    * @notice Updates the address of the admin to the pending admin.
    */
    function acceptAdmin() public {
        require(msg.sender == pendingAdmin, "Treasury: Call must come from pendingAdmin.");
        admin = msg.sender;
        pendingAdmin = address(0);

        emit NewAdmin(msg.sender);
    }

    /**
    * @notice Updates the contract's pending admin.
    * @dev Only this contract can call this function.
    * @param _pendingAdmin Address of the pending admin.
    */
    function setPendingAdmin(address _pendingAdmin) public {
        require(msg.sender == address(this), "Treasury: Call must come from Treasury.");
        pendingAdmin = _pendingAdmin;

        emit NewPendingAdmin(_pendingAdmin);
    }

    /**
    * @notice Adds a new transaction to the queue.
    * @dev Only the admin can call this function.
    * @param _target Address of the contract to call.
    * @param _value Amount of native coin to pay in the transaction.
    * @param _signature The function signature.
    * @param _data The value of each parameter in the function signature.
    * @param _eta Minimum timestamp at which the transaction can execute.
    * @return bytes32 The hash of the transaction.
    */
    function queueTransaction(address _target, uint256 _value, string memory _signature, bytes memory _data, uint256 _eta) public returns (bytes32) {
        require(msg.sender == admin, "Treasury: Call must come from admin.");
        require(_eta >= getBlockTimestamp().add(delay), "Treasury: Estimated execution block must satisfy delay.");

        bytes32 txHash = keccak256(abi.encode(_target, _value, _signature, _data, _eta));
        queuedTransactions[txHash] = true;

        emit QueueTransaction(txHash, _target, _value, _signature, _data, _eta);
        return txHash;
    }

    /**
    * @notice Cancels a transaction with the same hash as the one generated by the function parameters.
    * @dev Only the admin can call this function.
    * @param _target Address of the contract to call.
    * @param _value Amount of native coin to pay in the transaction.
    * @param _signature The function signature.
    * @param _data The value of each parameter in the function signature.
    * @param _eta Minimum timestamp at which the transaction can execute.
    */
    function cancelTransaction(address _target, uint256 _value, string memory _signature, bytes memory _data, uint256 _eta) public {
        require(msg.sender == admin, "Treasury: Call must come from admin.");

        bytes32 txHash = keccak256(abi.encode(_target, _value, _signature, _data, _eta));
        queuedTransactions[txHash] = false;

        emit CancelTransaction(txHash, _target, _value, _signature, _data, _eta);
    }

    /**
    * @notice Executes a transaction with the same hash as the one generated by the function parameters.
    * @dev Only the admin can call this function.
    * @dev Throws an error if the current time is less than the tranaction's eta.
    * @param _target Address of the contract to call.
    * @param _value Amount of native coin to pay in the transaction.
    * @param _signature The function signature.
    * @param _data The value of each parameter in the function signature.
    * @param _eta Minimum timestamp at which the transaction can execute.
    * @return bytes The data returned by the transaction.
    */
    function executeTransaction(address _target, uint256 _value, string memory _signature, bytes memory _data, uint256 _eta) public payable returns (bytes memory) {
        require(msg.sender == admin, "Treasury: Call must come from admin.");

        bytes32 txHash = keccak256(abi.encode(_target, _value, _signature, _data, _eta));
        require(queuedTransactions[txHash], "Treasury: Transaction hasn't been queued.");
        require(getBlockTimestamp() >= _eta, "Treasury: Transaction hasn't surpassed time lock.");
        require(getBlockTimestamp() <= _eta.add(GRACE_PERIOD), "Treasury: Transaction is stale.");

        queuedTransactions[txHash] = false;

        bytes memory callData;

        if (bytes(_signature).length == 0) {
            callData = _data;
        } else {
            callData = abi.encodePacked(bytes4(keccak256(bytes(_signature))), _data);
        }

        // solium-disable-next-line security/no-call-value
        (bool success, bytes memory returnData) = _target.call{value: _value}(callData);
        require(success, "Treasury: Transaction execution reverted.");

        emit ExecuteTransaction(txHash, _target, _value, _signature, _data, _eta);

        return returnData;
    }

    /* ========== INTERNAL FUNCTIONS ========== */

    /**
    * @notice Returns the current timestamp.
    */
    function getBlockTimestamp() internal view returns (uint256) {
        // solium-disable-next-line security/no-block-members
        return block.timestamp;
    }

    /* ========== EVENTS ========== */

    event NewAdmin(address indexed newAdmin);
    event NewPendingAdmin(address indexed newPendingAdmin);
    event NewDelay(uint256 indexed newDelay);
    event CancelTransaction(bytes32 indexed txHash, address indexed target, uint256 value, string signature,  bytes data, uint256 eta);
    event ExecuteTransaction(bytes32 indexed txHash, address indexed target, uint256 value, string signature,  bytes data, uint256 eta);
    event QueueTransaction(bytes32 indexed txHash, address indexed target, uint256 value, string signature, bytes data, uint256 eta);
}